#!/bin/bash
# shellcheck shell=bash disable=1091

# Copyright The Red Cyclops Â© 2023
# This program is free software: you can redistribute it and/or modify it under the terms of
# the GNU General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <https://www.gnu.org/licenses/>.

# Import libraries
source formatlib
source configlib

info "Attempting to load schedule"

# Get when the program should run again
reloadtime=$(getvalue reload-time)
# Write start of crontab to a temporary file
info "Writting crontab"
echo "
#User Crontab
# min    hour    day    month    weekday    command
$(date '+%M   %H     *    *      1-5' --date="$reloadtime")        $MUSICBOX_BIN_DIR/load | tee $MUSICBOX_LOG_DIR/$(date +%Y-%m-%d).log"\
   > "$MUSICBOX_CACHE_DIR/newcrontab.txt"

# Set the schedule file
schedule="$MUSICBOX_CACHE_DIR/schedule"
# Check that the schedule file exists
[ -f "$schedule" ] || critical "Schedule file wasn't downloaded"
# Create functions
getmode(){
    awk -v FPAT='[^[:space:]]+' "NR==$1 {print \$1}" "$schedule"
}
gettime(){
    awk -v FPAT='[^[:space:]]+' "NR==$1 {print \$2}" "$schedule"
}
getsong(){
    touch "$MUSICBOX_CACHE_DIR"/scheduledsongs
    song=$(awk -v FPAT='[^[:space:]]+' "NR==$1 {print \$3}" "$schedule")
    if [[ "$song" == *"random"* ]]; then
        for songfile in "$MUSICBOX_CACHE_DIR"/music/*; do
            if ! grep -Fxq "$songfile" "$MUSICBOX_CACHE_DIR"/scheduledsongs; then
                echo "$songfile" | tee -a "$MUSICBOX_CACHE_DIR"/scheduledsongs
                return
            fi
        done
        rm  "$MUSICBOX_CACHE_DIR"/scheduledsongs
        getsong "$1"
    else
        echo "$MUSICBOX_CACHE_DIR/extra-songs/${song:?}"
    fi
}
# Parse schedule
line=1
command="cvlc --no-video"
while [[ $line -le $(wc -l "$schedule" | cut -d' ' -f1) ]]; do
    case $(getmode $line) in
        start) 
            echo "$(date '+%M   %H' --date="$(gettime $line)")  *   *   *   $command $(getsong $line)" >> "$MUSICBOX_CACHE_DIR/newcrontab.txt";;
        stop)
            epochtime="$(date '+%s' --date="$(gettime $line)")"
            song=$(getsong $line)
            songduration="$(mp3info -p "%S" "$song")"
            finalepochtime=$((epochtime-songduration))
            echo "$(date '+%M   %H' --date="@$finalepochtime") *   *   *   $command $song" >> "$MUSICBOX_CACHE_DIR/newcrontab.txt";;
        *)
        error "Misformated line ($line) found in schedule, proceeding...";;
    esac
    ((line++))
done

# Add newline at the end of crontab
printf '\n' >> "$MUSICBOX_CACHE_DIR/newcrontab.txt"
info "Finished writing crontab"

$MUSICBOX_DEBUG || info "$(cat "$MUSICBOX_CACHE_DIR/newcrontab.txt")"
# Set newcrontab.txt to be the crontab
if ! supercronic -test "$MUSICBOX_CACHE_DIR/newcrontab.txt"; then
	critical "Failed to set crontab"
fi
# Remove the temporary cron file
cp "$MUSICBOX_CACHE_DIR/newcrontab.txt" "$MUSICBOX_CFG_DIR"/crontab
rm "$MUSICBOX_CACHE_DIR/newcrontab.txt"
supercronic "$MUSICBOX_CFG_DIR"/crontab
