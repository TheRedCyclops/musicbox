#!/bin/bash
# shellcheck shell=bash disable=1091

# Copyright The Red Cyclops Â© 2023
# This program is free software: you can redistribute it and/or modify it under the terms of
# the GNU General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <https://www.gnu.org/licenses/>.

#Import libraries
source formatlib

# Add the functions
# Gets the File ID from google drive of a file specified with a regex
gdriveinit() {
    gdrive account switch "$MUSICBOX_EMAIL" > /dev/null
}
getfileid(){
    #TODO: Allow for searching inside folders, reimplement with 
    #if [ "$1" = "--parent" ]; then
    #    gdrive files list --parent "$2" | grep -i -E "$3" | sed -E 's/[ ].*//g'
    #fi
    gdrive files list | grep -i -E "$1" | sed -E 's/[ ].*//g'
}
# Download a file or folder from google drive given the name
downloadfile(){
    gdriveinit
    # Get the file ID
    id=$(getfileid "$1") || critical "$1 file not found!"
    # Check for output file
    if [ -z "$2" ]; then
    critical "Output file wasn't especifed"
    fi
    # Try to download as file, if it fails check if it's a document, a directory or another error
    local tempfile
    tempfile="$(mktemp --suffix=".txt" -p "$MUSICBOX_TMP_DIR")" || error "failed to create temporary file (gdrivelib)"
    error=$(gdrive files download "$id" --destination "$tempfile" 2>&1)
    while [[ -n "$error" ]]; do
        case "$error" in
            # Download documents
            *'fileNotDownloadable'*)
                unset error
                error=$(gdrive files export --overwrite "$id" "$tempfile" 1>/dev/null 2>&1)
            ;;
            # Download directories
            *'is a directory'*)
                unset error
                error=$(gdrive files download --recursive "$id" --destination "$tempfile" 1>/dev/null 2>&1)
            ;;
            '')
                #break;
                true;
            ;;
            *)
                critical "Unhandled error occured when trying to download $1, [[$error]]"
            ;;

        esac
    done
    # Done in two steps to allow writing to stdout
    cp "$tempfile" "$2"
    rm "$tempfile"
}